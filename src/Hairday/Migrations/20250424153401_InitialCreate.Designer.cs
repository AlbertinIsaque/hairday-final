// <auto-generated />
using System;
using Hairday.Controllers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hairday.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250424153401_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Agendamento", b =>
                {
                    b.Property<int>("id_agendamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id_agendamento"));

                    b.Property<string>("CNPJ_barbearia")
                        .IsRequired()
                        .HasColumnType("varchar(14)");

                    b.Property<string>("CPF_barbeiro")
                        .IsRequired()
                        .HasColumnType("varchar(11)");

                    b.Property<DateTime>("data")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("hora")
                        .HasColumnType("time(6)");

                    b.Property<int>("id_cliente")
                        .HasColumnType("int");

                    b.HasKey("id_agendamento");

                    b.HasIndex("CNPJ_barbearia");

                    b.HasIndex("CPF_barbeiro");

                    b.HasIndex("id_cliente");

                    b.ToTable("Agendamentos");
                });

            modelBuilder.Entity("Agendamento_Servico", b =>
                {
                    b.Property<int>("id_agendamento")
                        .HasColumnType("int");

                    b.Property<int>("id_servico")
                        .HasColumnType("int");

                    b.HasKey("id_agendamento", "id_servico");

                    b.HasIndex("id_servico");

                    b.ToTable("Agendamento_Servicos");
                });

            modelBuilder.Entity("Barbearia", b =>
                {
                    b.Property<string>("CNPJ_barbearia")
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("cidade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("senha")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("telefone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CNPJ_barbearia");

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("Barbearias");
                });

            modelBuilder.Entity("Barbeiro", b =>
                {
                    b.Property<string>("CPF_barbeiro")
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("CNPJ_barbearia")
                        .IsRequired()
                        .HasColumnType("varchar(14)");

                    b.Property<string>("cidade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("senha")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CPF_barbeiro");

                    b.HasIndex("CNPJ_barbearia");

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("Barbeiros");
                });

            modelBuilder.Entity("Cliente", b =>
                {
                    b.Property<int>("id_cliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id_cliente"));

                    b.Property<string>("cidade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("senha")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("telefone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id_cliente");

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Hairday.Models.Horario_Disponivel", b =>
                {
                    b.Property<int>("id_horario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id_horario"));

                    b.Property<string>("CPF_barbeiro")
                        .IsRequired()
                        .HasColumnType("varchar(11)");

                    b.Property<DateTime>("data")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("hora")
                        .HasColumnType("time(6)");

                    b.Property<int?>("id_agendamento")
                        .HasColumnType("int");

                    b.Property<bool>("ocupado")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id_horario");

                    b.HasIndex("CPF_barbeiro");

                    b.HasIndex("id_agendamento");

                    b.ToTable("Horario_Disponivel");
                });

            modelBuilder.Entity("Servico", b =>
                {
                    b.Property<int>("id_servico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id_servico"));

                    b.Property<string>("CNPJ_barbearia")
                        .IsRequired()
                        .HasColumnType("varchar(14)");

                    b.Property<string>("CPF_barbeiro")
                        .IsRequired()
                        .HasColumnType("varchar(11)");

                    b.Property<string>("nome_servico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("preco")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("id_servico");

                    b.HasIndex("CNPJ_barbearia");

                    b.HasIndex("CPF_barbeiro");

                    b.ToTable("Servicos");
                });

            modelBuilder.Entity("Agendamento", b =>
                {
                    b.HasOne("Barbearia", "barbearia")
                        .WithMany("agendamentos")
                        .HasForeignKey("CNPJ_barbearia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Barbeiro", "barbeiro")
                        .WithMany("agendamentos")
                        .HasForeignKey("CPF_barbeiro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cliente", "cliente")
                        .WithMany("agendamentos")
                        .HasForeignKey("id_cliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("barbearia");

                    b.Navigation("barbeiro");

                    b.Navigation("cliente");
                });

            modelBuilder.Entity("Agendamento_Servico", b =>
                {
                    b.HasOne("Agendamento", "agendamento")
                        .WithMany("agendamento_servicos")
                        .HasForeignKey("id_agendamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Servico", "servico")
                        .WithMany("agendamento_servicos")
                        .HasForeignKey("id_servico")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("agendamento");

                    b.Navigation("servico");
                });

            modelBuilder.Entity("Barbeiro", b =>
                {
                    b.HasOne("Barbearia", "barbearia")
                        .WithMany("barbeiros")
                        .HasForeignKey("CNPJ_barbearia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("barbearia");
                });

            modelBuilder.Entity("Hairday.Models.Horario_Disponivel", b =>
                {
                    b.HasOne("Barbeiro", "barbeiro")
                        .WithMany("horarios_disponiveis")
                        .HasForeignKey("CPF_barbeiro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agendamento", "agendamento")
                        .WithMany("horarios_disponiveis")
                        .HasForeignKey("id_agendamento")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("agendamento");

                    b.Navigation("barbeiro");
                });

            modelBuilder.Entity("Servico", b =>
                {
                    b.HasOne("Barbearia", "barbearia")
                        .WithMany("servicos")
                        .HasForeignKey("CNPJ_barbearia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Barbeiro", "barbeiro")
                        .WithMany("servicos")
                        .HasForeignKey("CPF_barbeiro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("barbearia");

                    b.Navigation("barbeiro");
                });

            modelBuilder.Entity("Agendamento", b =>
                {
                    b.Navigation("agendamento_servicos");

                    b.Navigation("horarios_disponiveis");
                });

            modelBuilder.Entity("Barbearia", b =>
                {
                    b.Navigation("agendamentos");

                    b.Navigation("barbeiros");

                    b.Navigation("servicos");
                });

            modelBuilder.Entity("Barbeiro", b =>
                {
                    b.Navigation("agendamentos");

                    b.Navigation("horarios_disponiveis");

                    b.Navigation("servicos");
                });

            modelBuilder.Entity("Cliente", b =>
                {
                    b.Navigation("agendamentos");
                });

            modelBuilder.Entity("Servico", b =>
                {
                    b.Navigation("agendamento_servicos");
                });
#pragma warning restore 612, 618
        }
    }
}
